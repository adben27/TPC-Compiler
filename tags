!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!LEX	c,cond	/start or exclusive condition/
!_TAG_KIND_DESCRIPTION!LEX	r,regex	/named regular expression/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!YACC	l,label	/labels/
!_TAG_KIND_DESCRIPTION!YACC	t,token	/tokens/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!LEX	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!YACC	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/adsys/google_drive/Licence Info/L3 Eiffel/S1/AnalyseSyntaxique/AnaSynt_Code/Projet/proj_anasynt/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
ADDSUB	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
AND	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
Arguments	src/tpc-2023-2024.y	/^Arguments:$/;"	l
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS= -Wall -g -Iobj -Isrc$/;"	m
CHARACTER	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
COM	src/tpc-2023-2024.lex	/^%x COM COMS$/;"	c
COMS	src/tpc-2023-2024.lex	/^%x COM COMS$/;"	c
Compilation	README.md	/^## Compilation$/;"	s	chapter:proj_anasynt
Corps	src/tpc-2023-2024.y	/^Corps: '{' DeclVars SuiteInstr '}'$/;"	l
DIVSTAR	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
DeclFonct	src/tpc-2023-2024.y	/^DeclFonct:$/;"	l
DeclFoncts	src/tpc-2023-2024.y	/^DeclFoncts:$/;"	l
DeclVars	src/tpc-2023-2024.y	/^DeclVars:$/;"	l
Declarateurs	src/tpc-2023-2024.y	/^Declarateurs:$/;"	l
E	src/tree.h	/^  E,$/;"	e	enum:__anon7c1c46a20103
ELSE	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
EQ	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
EXEC	makefile	/^EXEC=tpc-2023-2024$/;"	m
EnTeteFonct	src/tpc-2023-2024.y	/^EnTeteFonct:$/;"	l
Exp	src/tpc-2023-2024.y	/^Exp :  Exp OR TB$/;"	l
FB	src/tpc-2023-2024.y	/^FB  :  FB EQ M$/;"	l
FIRSTCHILD	src/tree.h	/^#define FIRSTCHILD(/;"	d
IDENT	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
IF	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
Implémentation des tableaux	README.md	/^## Implémentation des tableaux$/;"	s	chapter:proj_anasynt
Instr	src/tpc-2023-2024.y	/^Instr:$/;"	l
LDFLAGS	makefile	/^LDFLAGS= -lfl$/;"	m
LValue	src/tpc-2023-2024.y	/^LValue:$/;"	l
ListExp	src/tpc-2023-2024.y	/^ListExp:$/;"	l
ListTypVar	src/tpc-2023-2024.y	/^ListTypVar:$/;"	l
NUM	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
Node	src/tree.h	/^typedef struct Node {$/;"	s
Node	src/tree.h	/^} Node;$/;"	t	typeref:struct:Node
OR	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
ORDER	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
Parametres	src/tpc-2023-2024.y	/^Parametres:$/;"	l
Prog	src/tpc-2023-2024.y	/^Prog:  DeclVars DeclFoncts$/;"	l
RETURN	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
SECONDCHILD	src/tree.h	/^#define SECONDCHILD(/;"	d
StringFromLabel	src/tree.c	/^static const char *StringFromLabel[] = {$/;"	v	typeref:typename:const char * []	file:
Structure de l'arbre abstrait	README.md	/^## Structure de l'arbre abstrait $/;"	s	chapter:proj_anasynt
SuiteInstr	src/tpc-2023-2024.y	/^SuiteInstr:$/;"	l
T	src/tree.h	/^  T,$/;"	e	enum:__anon7c1c46a20103
TB	src/tpc-2023-2024.y	/^TB  :  TB AND FB$/;"	l
THIRDCHILD	src/tree.h	/^#define THIRDCHILD(/;"	d
TYPE	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
VOID	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
WHILE	src/tpc-2023-2024.y	/^%token TYPE VOID IDENT IF ELSE WHILE RETURN OR AND EQ ORDER ADDSUB DIVSTAR NUM CHARACTER  $/;"	t
__anon7c1c46a20103	src/tree.h	/^typedef enum {$/;"	g
a	test/good/1.c	/^int a;$/;"	v	typeref:typename:int
a	test/syn-err/1.c	/^int a;$/;"	v	typeref:typename:int
addChild	src/tree.c	/^void addChild(Node *parent, Node *child) {$/;"	f	typeref:typename:void
addSibling	src/tree.c	/^void addSibling(Node *node, Node *sibling) {$/;"	f	typeref:typename:void
bin	makefile	/^bin obj:$/;"	t
bin/tpcas	makefile	/^bin\/tpcas : obj\/lex.yy.o obj\/$(EXEC).tab.o obj\/tree.o | bin$/;"	t
clean	makefile	/^clean:$/;"	t
deleteTree	src/tree.c	/^void deleteTree(Node *node) {$/;"	f	typeref:typename:void
divstar	src/tree.h	/^  divstar,$/;"	e	enum:__anon7c1c46a20103
escape	src/tpc-2023-2024.lex	/^escape [\\t ]$/;"	r
fact	test/good/1.c	/^int fact(void) $/;"	f	typeref:typename:int
fact	test/syn-err/1.c	/^int fact(void) $/;"	f	typeref:typename:int
firstChild	src/tree.h	/^  struct Node *firstChild, *nextSibling;$/;"	m	struct:Node	typeref:struct:Node *
id	src/tree.h	/^  id$/;"	e	enum:__anon7c1c46a20103
label	src/tree.h	/^  label_t label;$/;"	m	struct:Node	typeref:typename:label_t
label_t	src/tree.h	/^} label_t;$/;"	t	typeref:enum:__anon7c1c46a20103
letter	src/tpc-2023-2024.lex	/^letter [A-Za-z_]$/;"	r
lineno	src/tree.h	/^  int lineno;$/;"	m	struct:Node	typeref:typename:int
main	test/good/2.c	/^int main(int argc) {$/;"	f	typeref:typename:int
makeNode	src/tree.c	/^Node *makeNode(label_t label) {$/;"	f	typeref:typename:Node *
nextSibling	src/tree.h	/^  struct Node *firstChild, *nextSibling;$/;"	m	struct:Node	typeref:struct:Node *
obj	makefile	/^bin obj:$/;"	t
obj/$(EXEC).tab.c	makefile	/^obj\/$(EXEC).tab.c : src\/$(EXEC).y obj\/tree.o | obj$/;"	t
obj/$(EXEC).tab.o	makefile	/^obj\/$(EXEC).tab.o : obj\/$(EXEC).tab.c | obj$/;"	t
obj/lex.yy.c	makefile	/^obj\/lex.yy.c: src\/$(EXEC).lex | obj$/;"	t
obj/lex.yy.o	makefile	/^obj\/lex.yy.o : obj\/lex.yy.c obj\/$(EXEC).tab.c | obj $/;"	t
obj/tree.o	makefile	/^obj\/tree.o : src\/tree.c src\/tree.h | obj$/;"	t
printTree	src/tree.c	/^void printTree(Node *node) {$/;"	f	typeref:typename:void
proj_anasynt	README.md	/^# proj_anasynt$/;"	c
